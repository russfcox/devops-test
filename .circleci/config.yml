version: 2.0
jobs:
  build:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install docker-compose==1.12.0
      - run:
          name: Build container images
          command: |
               docker-compose build
      - run:
          name: Test containers and run test db migration
          command: |
               docker-compose up -d db
               docker-compose up -d app lb
      - run:
          name: Push image to registry
          command: |
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                 docker login -u $dh_user -p $dh_pass
                 docker tag russcox/app russcox/app:${CIRCLE_SHA1}
                 docker push russcox/app:${CIRCLE_SHA1}
                 docker tag russcox/app russcox/app:latest
                 docker push russcox/app:latest
              fi
      - persist_to_workspace:
          root: .
          paths: terraform
  tftest:
    docker:
      - image: hashicorp/terraform:light
    environment:
      - TF_IN_AUTOMATION: "1"
    steps:
      - attach_workspace:
          at: terraform
      - run:
          name: Test terraform plan
          command: |
            cd terraform
            terraform init -input=false
            terraform workspace select test
            terraform validate
            terraform plan -input=false -out=${CIRCLE_ARTIFACTS}/tfplan-${CIRCLE_SHA1}.out
  awstest:
    docker:
      - image: hashicorp/terraform:light
    environment:
      - TF_IN_AUTOMATION: "1"
    steps:
      - checkout
      - run:
          name: Spin up test AWS environment
          command: |
            cd terraform
            terraform init -input=false
            terraform workspace select test
            terraform validate
            terraform plan
            terraform apply -auto-approve
      - run:
          name: test ephemeral environment
          command: curl --retry 25 --retry-delay 5 -v http://app-test.russcox.co.uk/api/user
      - run:
          name: Tear down test AWS environment
          command: |
            cd terraform
            terraform destroy -force
  prodtag:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - run:
          name: Tag production docker image
          command: |
             docker login -u $dh_user -p $dh_pass
             docker pull russcox/app:latest
             docker tag russcox/app:latest russcox/app:${CIRCLE_SHA1}
             docker push russcox/app:${CIRCLE_SHA1}
             docker tag russcox/app:latest russcox/app:production
             docker push russcox/app:production
  deploy:
    docker:
      - image: hashicorp/terraform:light
    environment:
      - TF_IN_AUTOMATION: "1"
    steps:
      - checkout
      - run:
          name: DEPLOY ALL THE THINGS!!!
          command: |
            cd terraform
            terraform init -input=false
            terraform workspace select production
            terraform taint aws_ecs_task_definition.test-http
            terraform plan -out=tfplan -input=false
            terraform apply -auto-approve
      - store_artifacts:
          path: ./tfplan
  smoketest:
    docker:
      - image: appropriate/curl
    steps:
      - run:
          name: Post deploy smoke test
          command: curl --retry 25 --retry-delay 5 -v http://app-production.russcox.co.uk/api/user
workflows:
  version: 2
  pipeline:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /feature-.*/
                - master
      - tftest:
          requires:
            - build
          filters:
            branches:
              only:
                - /feature-.*/
      - awstest:
          requires:
            - build
          filters:
            branches:
              only: master
      - prodtag:
          filters:
            branches:
              only: /release-.*/
      - deploy:
          requires:
            - prodtag
      - smoketest:
          requires:
            - deploy
